name: CI - Django Tests, Linting & Coverage (MySQL)

on:
  push:
    paths:
      - 'messaging_app/**'
  pull_request:
    paths:
      - 'messaging_app/**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: test_db
          MYSQL_USER: ci_user
          MYSQL_PASSWORD: cipass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=5s
          --health-timeout=10s
          --health-retries=10

    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_DATABASE: test_db
      MYSQL_USER: ci_user
      MYSQL_PASSWORD: cipass
      PYTHONUNBUFFERED: 1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      working-directory: messaging_app
      run: |
        sudo apt-get update
        sudo apt-get install -y default-mysql-client
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 coverage pytest

    - name: Run flake8 Linting
      working-directory: messaging_app
      run: |
        echo "Running flake8 checks..."
        # Fail immediately if any linting errors found
        flake8 . --max-line-length=120 --count --show-source --statistics

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          mysql --host=${{ env.MYSQL_HOST }} -u${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }} -e "SELECT 1" && break
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Run migrations and tests with coverage
      working-directory: messaging_app
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.test_settings
        MYSQL_HOST: ${{ env.MYSQL_HOST }}
        MYSQL_PORT: ${{ env.MYSQL_PORT }}
        MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
      run: |
        python manage.py migrate --noinput
        coverage run -m pytest --junitxml=results.xml
        coverage report
        coverage html

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: messaging_app/results.xml

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: messaging_app/htmlcov
